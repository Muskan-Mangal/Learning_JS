JaveScript is a Synchronus(executes in a specific order -> can only go to the next line once the current line is finished executing), single threaded (can only execute
one command at a time) language.
JS is a lossely typed or weekly types language which means irrespstive of datatype you can ssign anything to variable.


Execution context: 
Everything in JS happens inside execution context. an execution context is an abstract concept of an environment where the Javascript code is 
evaluated and executed. Whenever any code is run in JavaScript, it runs inside an execution context.The global execution context is created when a JavaScript script 
first starts to run, and it represents the global scope in JavaScript. A function execution context is created whenever a function is called, representing the 
function's local scope. 

It has 2 components:

1. Memory Component (variable environment, memory creation phase): where all the variables and functions are stored as key-value pairs. It goes throught the entire code
, allocates and reserves a memory for them. variables are intilialised with value undefined (a: undefined)and for functions it stores the whole code in memory space.
2. Code Component (Thread of execution, code execution phase): This is the place where code is executed one line at a time. in the second phase of creation of execution 
context which is code execution phase, the value of variables will actually get initialised (a=2). whenever a new function is INVOKED (actually called), a new functional 
execution context is created , in it's memory comp., it stores parameters and other variable and fucntions inside that function. Then hwen it encounters return keyword,
it return the control back to the execution context where the functions was invoked and that functional execution context is deleted. 

CALL STACK : 
It is like a real stack in data structures where data can be pushed and popped and follows the LIFO principle. We use call stack for memorizing which function is
running right now. Basically, a Javascript engine uses a call stack to manage execution context. When JS fucntion is run, the javascript engine builds a global 
execution context and pushes it to the top of the call stack. and when a function is called the javascript engine constructs a context for the function execution, 
places it at the top of the call stack, and begins the function’s execution. if the function calls another function javascript engine creates a new function execution 
context and pushes it to the top of the call stack. when it encoutners the return keyword that Exe. context is popped out. In the end, the Global execution context is
also deleted and the stack becomes empty.
In short , call stack maintains the order of execution of execution Contexts.

Hoisting :
Hoisting allows you to refer to JavaScript variables and functions prior to their declaration
JavaScript Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables or classes to the top of their scope, prior
to execution of the code. Variables defined with let and const are hoisted to the top of the block, but not initialized. Meaning: The block of code is aware of the 
variable, but it cannot be used until it has been declared. Using a let variable before it is declared will result in a ReferenceError.
Also in case of let and const , you can't redeclare them , it will throw syntax error

Window:
window is the global object created along with global execution context. So a global object is created by JS engine (in chromes case it's v8 engine), in case of 
browsers it's called window. Whenever an execution context is created a "this" variable is also created. At the global level "this" points to the global object
( window object in case of browsers). Anything that is not inside a function is the "global space".Whenever we create any variables or functions in the 
"global space", they get attached to the global object( window object in case of browsers). (not in case of let and const)

Undefined :
means that a variable has been declared but has not been assigned a value. In JavaScript, properties and functions can only belong to objects. Since undefined is 
not an object type, calling a function or a property on such a variable causes the TypeError: Cannot read property of undefined.

SCOPE:
scope means where you can access a specific variable or function. there are two aspect to it. First what's the scope of variable B which means where I can access b,
and the other is b inside the scope of function C which means can I access variable b inside function c.
It determines the accessibility of variables, objects, and functions from different parts of the code.

https://javascript.plainenglish.io/scope-chain-and-lexical-environment-in-javascript-eb1f6e60997e

Lexical Scope
When we have a nested group of functions, the inner function has access to variables and other resources of the parent function. This means child functions are 
lexically bound to the execution context of their parents.

scope is directly dependent on the lexical environment.

Lexical environment:
whenver an execution context is created, a lexical environment is also created (in the memory comp. u get a reference to the lexical environment of it's parent). 
It's the local memory along withreference to the lexical environment of it's parent. Lexical as a term means in heirarchy like c is lexically inside a function a 
and fucntion a is lexically inside the global scope. For global execution lexical parents is NULL. 
So when searching for a variable in function B,it will first search in it's local memory (the memory comp of that fucntional xecution context) and then there it
will get reference to lexical environment of parent of fucntion B and wll search in their memory comp.

The lexical environment contains two components:

Environment record: It is the actual place where the variable and function declarations are stored.
Reference to the outer environment: It means it has access to its outer (parent) lexical environment.

SCOPE CHAIN 
SO this way or this mechanism of searching the scope is called scope chain. It's bacially the chain of all the lexical environments and parent references.
The scope chain helps to resolve variables. When a variable needs to resolve, JavaScript starts from the innermost level of the code and keeps jumping back to the 
parent scope until it finds the variable it’s looking for.

LET and CONST :

let and const are other ways of declaring a variable. They are hoisted which mean a memory space is created for them  Where they differ from other is declarations in 
the hoisting process is in their initialization. This makes them inaccessible (as such variables are in a temporal dead zone). They are not attached to the global 
object actually in a different memory space not like the global one. 
Const is more strict then var and let, in case of let you can initialise it later after declaring , it won't be accesible since till the time it's not initialised, 
it would be in temporal dead zone and will give reference error if tried to access, but in case of const, it needs to be initialised at the time of declaration only,
else it will throw syntax error and code won't even run.

Initialising variables at the top is good idea, helps shrinks TDZ to zero.

Temporal Dead Zone : A temporal dead zone (TDZ) is the block where a variable is inaccessible until the moment the computer initializes it with a value. 
kind of the ohase where the variable is hoisted and initialised.

Block : Code inside curly bracket is called block. It is used to combine multiple statement into one statement so that we can use it at those places where javascript
expects to have single statement.

Block Scope: The block scope of a variable means that the variable is accessible within the block that is between the curly brace. let and const are block scoped
if we have a block with 3 variables, {var a=10; let b=20; const c=30;), then you won't be able to access let and const outside this block but var will be accebile 
because var is functional scoped not block scoped, in this example var is stored in global space only but let and const are stores in a different memory section called
block() for that particular block.

Shadowing :
Basiclag occurs when a variable declared in a certain scope (e.g. a local variable) has the same name as a variable in an outer scope (e.g. a global variable).
When this happens, the outer variable is said to be shadowed by the inner variable.

Illegal shadowing : Illegal shadowing is if while shadowing a variable, it crosses the boundary of the scope. If you create a variable in a global scope with the 
let keyword and another variable with the var keyword in a block scope but the exact same name, it will throw an error. You can shadow let using let, and even var 
using let.

CLOSURE:
The combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you 
access to an outer function's scope from an inner function 
In JavaScript you can assign a fucntion to a variable and also you can pass function as a parameter even you can return the function in JavaScript!!
Whenever function is returned, even if its parents vanished in execution context but still it remembers the reference it was pointing to. Its not just that function 
alone it returns but the entire closure. To use a closure in JavaScript, you can define a function inside another function and use the inner function to access the 
outer function's variables and parameters. You can also return the inner function from the outer function to make the closure available for use elsewhere in your 
code. 

function outerFunction() {
 var outerVariable = "Hello, ";
 function innerFunction(name) {
  console.log(outerVariable + name);
  }
 return innerFunction;
 }
var inner = outerFunction();
inner("John"); // Output: "Hello, John"

idelly when outefunction has returned innerfunction, the outervariable shoulnd't exisit and be accesible outside right, but it innerfunction is clousre here , when 
retured it remebers where ti came from, it remembers it's lexical scope and return that too along with function. Closure is used in currying, function like once etc.

Advantages of Closure:
1. in data hiding and encapsulation
2. function curry
3. high order function like memoize and once
4. set timeout functions

Disadvantages of clousre:
1. there could be overconsuption of memory if we create a lot of closures because those variables are not garbage collected till the program expires.
2. if not handled properly it can also lead to memory leaks, it can also freeze the browser

Garbage collector:
it is like a program in browser or in js engine which kind of frees up the untilised memory. in c, c++ it's up to user how they want to allocate and deallocate but 
in high level language like JS, it's done by the js engine. SO if there is any unused variableor when it figures that these are not needed now, it fress that memory.

but some of the modern js engine or browser, they have smart garbage collection mechanism. They can figure out which variable is refenced in closure and which is 
not needed.


Function statement/funtion declaration : A normal function that we create using Naming convention. & By this we can do the Hoisting.
      For Ex  -  function xyz(){ console.log("Function Statement"); }

Function Expression : When we assign a function into a variable like a value ,that is Function Expression & since it's treated as value and initialised as undefined
, we can't invoke it before initilaisation hence We can not do Hoisting.
 var a = function() { console.log("Function Expression"); }

Anonymous Function : Function without name. it will throw error if used like statement but It can be used in a place where function are treated as value line in exp.
      For Ex - function(){ }

First Class Function: The Ability to use function as value, can be assigned to a variable, can be passed as an argument, can be returned from function.

CALL BACK FUNCTION: 
you can  take a function and pass it as argument in another function. so that function that's passed as an argument to another function is called Call BAck fucntions
bascially a function that will be called back later by another function.
Due to callbackes we can make JS behave like asynchronus one. eg. setTimeout(function (){console.log("called");}, 5000) , so JS won't wait for 5 seconds  instead it 
will register the timer and will move to next line, and when the time ticks 5 seconds it will print "called". SO it didn't behave synchronus (line exe. one by one in
order, when one finished executing).

Javascript has only one call stack and that is also called the main thread and if any execution blocks the call stack that is called "lbocking the main thread", like 
if a fucntion has very heavy operaiton, is taking 50-40 sec to finish so since JS has only one call stack everything else will be blocked till that time , so we shall
always try to use asyn functions likr settime out .
By default, the browser uses a single thread to run all the JavaScript in your page, as well as to perform layout, reflows, and garbage collection. This means that 
long-running JavaScript functions can block the thread, leading to an unresponsive page and a bad user experience.

EVENt Listeners: An event listener is a JavaScript's procedure that waits for the occurrence of an event. The addEventListener() method is an inbuilt function of 
JavaScript. We can add multiple event handlers to a particular element without overwriting the existing event handlers.The addEventListener() method attaches an 
event handler to an element like what to do onClick, on hover liek that.
but adding a lot of event listner can degarde the peromance, since so many closures sitting into memory, with all their scopes , all their callbacks. 
so we should remove event listner once we do that it will be garbage collected.

Web API Environments: 
the console, setTimeout(), DOM APIs (document.getelementbyID types), fetch() are not of javascript but Browser has these superpowers that are lent to JS engine to 
execute some tasks, these superpowers include web API's such as console, location, DOM API, setTimeout, fetch, local storage.

The Callback queue:
It is a data structure that operates on the FIFO (first-in-first-out) principle. Callback functions that need to be asynchronously executed, are pushed onto the 
callback queue. These are later pushed to the Call stack to be executed (when the event loop finds an empty call stack). like for setTimeout, once that's called,
a callback is registered in the webAPI environment and timer starts, once that timer is finished it's pushed to call back queue. For event listners, call back is
registered with the event ans same process, in the case of event listeners(for example click handlers), the original callbacks stay in the web API environment forever
, that's why it's advised to explicitly remove the listeners when not in use so that the garbage collector does its job.

EVENT LOOP: 
Event loop in JavaScript is a mechanism through which the 'calls waiting for execution' in the callback queue/job queue can be put on the call stack. Event loop 
continuously observes call stack and when it is empty it transfers task to call stack. 

Promises and mutation observer are stored in API environment and then transferred to microtask queue. Microtask queue is same but is high priority, event loop 
checks this queue first and then the call back queue.

JAVASCRIPT ENGINE: 
JS runtime environment contains all elements required to run JS. It contains JS engine, set of API's, callback queue, microtask queue, event loop. JS engine is a
piece of code. Chromes V8 engine is written in c++. Process in JS engine includes Parsing ---> Compilation -----> Execution.
Parsing breaks code into tokens and converts it into AST(Abstract Syntax Tree). JS was supposed to be a interpreted language when developed (now spidermonkey) but
Modern JS engine follows JIT(Just in time) compilation, it interprets while it optimises code as much as it can. so it's a combo of both interpretor and compiler.
Execution and Compilation are done together. Interpretor(directly executes, line by line hence fast ) , compiler (first compile to optimise it-> executes so efficient)
Execution has Garbage collector(it uses mark and sweep algo) and other optimisation such as inlining, copy elusion, inline caching etc.

Heigher Order functions:
Higher order functions are functions that take one or more functions as arguments, or return a function as their result. 
famous eg. map, filter, reduce 

1. map is used when we want transformation of whole array. like double each value, give binary of each value in arr. 
   const output= arr.map(double)
2. filter is used when we want to filter the arry accoding to a criteria, like odd values, divisble by 3, greater than 5.
   const output = arr.filter(isEven)
3. reduce is used when we want to reduce the array to single value eg (max, min, avg, sum, difference etc).
4. reduce passes two arguments one function(which includes accumulator and current) and another initial value of accumulator. eg, to find sum of array
   const output = arr.reduce(function(acc,curr){
                  acc=acc+curr;
                  return acc;}, 0 )
Power of these is these functions can be chained. We can use filter and then on the filtered value can use map like thta
const output = users.filter( (x) => x.age <30).map((x) => x.firstname)
